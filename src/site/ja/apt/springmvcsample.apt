 ------
 Spring MVC Sample
 ------

Spring MVC Sample

 {{{http://www.google.co.jp/search?q=springmvc}SpringMVC}}は、
 DIコンテナとして有名なSpringのサブプロジェクトとして提供されているWebアプリケーションフレームワークです。

 ここではSpringMVCのViewとしてmixer2を利用するサンプルを紹介します。

Practical sample : Fruit shop sample web application on SpringMVC

 * see: {{https://github.com/nabedge/mixer2-sample/tree/master/mixer2-fruitshop-springmvc}}

 * see: {{http://nabedge.blogspot.jp/2012/12/mixer2jspspringmvc-java-advent-calendar.html}}

Simple sample

* 準備

 {{{http://www.google.co.jp/search?q=springsource+tool+suite}Spring Source Tool Suite (STS)}}という、
 SpringMVC開発用のeclipseプラグインを利用しますので、eclipseとSTSを準備してください。
 eclipse3.6.x or higher であれば、ヘルプ→Eclipseマーケットプレイス のダイアログで
 「Spring Source Tool Suite」で検索するとすぐにインストール可能です。

 また、mavenも使いますので、
 {{{http://www.google.co.jp/search?q=m2e}m2eプラグイン}}もインストールしておいてください。

 準備ができたら、SpringMVCの新規プロジェクトを作成してください。
 新規プロジェクトのウィザードでSpringTemplateProjectを選択し、
 さらにSpringMVCを選択します。ルートパッケージ名は任意でかまいません。

 プロジェクトが作成されたらTomcat6 (or higher)を起動して、
 ブラウザ上に「Hello World」が表示されることを確認してください。

 なお、Tomcatが起動しても、JSTLタグライブラリ用のjarが見つからない
 というエラーメッセージが出て、
 Webアプリが起動しない症状が出ることがあるようです。
 SpringMVCプロジェクトの直下のpom.xmlで指定されている依存ライブラリが
 TOMCAT_HOME/lib 配下にあるjarと競合しているためと思われます。
 pom.xmlのdependencyのうち、artifactId が servlet-api と jsp-api である
 dependency タグに<scope>provided</scope>と追加すると解決可能です。

 以降、このサンプルプロジェクトをベースに説明します。

Hello World on Spring MVC with JSP

* {jarの追加}

 {{http://mixer2.org/dist/}}からzipファイルをダウンロード可能です。
 解凍してjarファイルをサンプルプロジェクトのsrc/main/webapp/WEB-INF/lib
 に置き、ビルド・パスに追加しておきます。

 mavenを使う場合には{{{download.html}download}}にあるように
 pom.xmlにdependencyを追加するだけで大丈夫です。

* {web.xmlにEncodingFilterを追加}

 日本語（マルチバイト文字）を表示する場合に必要です。
 src/main/webapp/WEB-INF/web.xml に下記を追加します。

----
<filter>
  <filter-name>characterEncodingFilter</filter-name>
  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  <init-param>
    <param-name>encoding</param-name>
    <param-value>UTF-8</param-value>
  </init-param>
  <init-param>
    <param-name>forceEncoding</param-name>
    <param-value>true</param-value>
  </init-param>
</filter>
<filter-mapping>
  <filter-name>characterEncodingFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>
----

* {Mixer2Engineのコンポーネント登録}

 src/main/webapp/WEB-INF/spring 配下にあるroot-context.xmlにMixer2Engineのコンポーネントを登録します。

----
 (一部省略)
<beans>

  <!-- Root Context: defines shared resources visible to all other web components -->

  <bean id="mixer2Engine" class="org.mixer2.Mixer2Engine" scope="singleton" />
</beans>

----

* {テンプレートを書く}

 src/main/resources/ の直下に、 HelloWorld.html という名前で下のようなテンプレートを作ります。

----
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="ja" lang="ja" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</head>
<body>
<div id="hellomsg">here comes message.</div>
</body>
</html>
----

* {Controllerクラスの改造}

 src/main/java/[パッケージ名]/HomeController.java を開いてください。
 既存のメソッドはそのままで、新たにメソッドを追加します。

----
package com.example.sample;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.mixer2.Mixer2Engine;
import org.mixer2.jaxb.xhtml.Div;
import org.mixer2.jaxb.xhtml.Html;
import org.mixer2.xhtml.exception.TagTypeUnmatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Controller;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {

    private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

    @Autowired
    private Mixer2Engine mixer2Engine;

    @Autowired
    private ResourceLoader resourceLoader;

    /**
     * Simply selects the home view to render by returning its name.
     * @throws IOException
     */
    @RequestMapping(value="/", method=RequestMethod.GET)
    public String home() throws IOException {
        logger.info("Welcome home!");
        return "home";
    }

    @RequestMapping(value="/hellomixer2", method=RequestMethod.GET)
    public ModelAndView mixer2test() throws IOException, TagTypeUnmatchException {

        // load html template
        Html html = mixer2Engine.loadHtmlTemplate(resourceLoader.getResource(
                "classpath:HelloWorld.html").getInputStream());

        html.getById("hellomsg", Div.class).getContent().clear();
        html.getById("hellomsg", Div.class).getContent().add("Hello Mixer2 !");

        Map<String,String> model = new HashMap<String,String>();
        model.put("htmlString", mixer2Engine.saveToString(html));

        ModelAndView modelAndView = new ModelAndView();
        modelAndView.setViewName("mixer2view");
        modelAndView.addAllObjects(model);

        return modelAndView;
    }
}
----

* {JSPの改造}

 src/main/webapp/WEB-INF/views の配下に mixer2view.jsp というファイルを新規作成します。

----
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
${htmlString}
----

 たった3行のシンプルなJSPになりました。DOCTYPE宣言をあらためて書いているのは、
 mixer2がDOCTYPE宣言を無かったことにしてしまうためです。(FAQ参照)

 改造はこれで終わりです。ブラウザで
 http://localhost:8080/(コンテキストパス名)/hellomixer2
 にアクセスして、Hello Mixer2 と表示されていることを確認してください。

Hello World on Spring MVC with View and ViewResolver

 SpringMVCフレームワーク用のViewとViewResolverクラスも用意されています。
 Controllerクラスのメソッドの戻り値として、ModelAndView型ではなく
 Html型(org.mixer2.jaxb.xhtml.Html)型のオブジェクトを直接返すだけで
 httpレスポンスとしてhtml文字列を返すことができます。
 <<jspファイルを用意する必要もありません。>>

 コントローラのメソッドはとてもシンプルになります。

----
   @Controller
   public class FooController {

     @Autowired
     Mixer2Engine mixer2Engine;

     @Autowired
     ResourceLoader resourceLoader;

     @RequestMapping(value = "/bar")
     public Html bar() {
         String template = "classpath:HelloWorld.html";
         Html html = m2e.loadHtmlTemplate(
             resourceLoader.getResource(template).getInputStream());
         html.getById("hellomsg", Div.class).getContent().clear();
         html.getById("hellomsg", Div.class).getContent().add("Hello Mixer2 !");
         return html;
     }
----

 詳しい使い方は
 {{{./apidocs/org/mixer2/springmvc/Mixer2XhtmlViewResolver.html}Mixer2XhtmlViewResolverのjavadoc}}
 をご覧ください。
