 ------
 FAQ
 ------

FAQ

* {Requirement}

 Java6以上が必要です。

* {対応しているxhtmlバージョン、タグ、属性}

 xhtml1.0-transitional(strictも可）およびXML構文で書かれたhtml5に対応しています。
 html5の仕様は2011年5月現在の仕様に準拠します。

 なお、xhtml1.0-transitionalに準拠しているということは、
 xhtml1.0-strictなテンプレートでもよいということです。
 xhtml1.0-strictはxhtml1.0-transitionalのsubsetだからです。

 html5のdata-*やaria-*等の属性にも対応しています。

 ただし、htmlタグそのものについてはxhtml1.0およびhtml5で規定されているタグのみ対応しています。
 任意のオリジナルタグ、例えば \<foo\>bar\</foo\>のようなタグを
 テンプレートに書いてもmixer2はそれを削除します。

* {正しいxhtmlを書いてください}

 mixer2は、テンプレートhtml文字列の読み込み(load≒unmarshal)時、
 およびHtmlオブジェクトの文字出力(save≒marshal)時のそれぞれのフェーズで、
 特にValidation(検証)をしていません。
 したがって、xhtmlの文法的に間違ったタグであってもmarshalは完了します。
 例えば、次のようなケースです。

 テンプレート（抜粋）：

----
<b> aaa <div>bbb</div> ccc </b>
----

 mixer2でloadし、何もせずにsaveToString()した結果（抜粋）：

----
<b>aaa   ccc</b>
----

 インライン要素であるbタグに、ブロック要素であるdivタグを含めることは
 htmlの仕様に照らして明らかにNGです。mixer2はテンプレートのロード(unmarshal)の
 段階でこれを無かったことにしてしまいます。警告も出しません。

 また、次のようなケースもあります。

 テンプレート（抜粋）：

----
<div id="a">xxx</div>
<div id="a">yyy</div>
----

 上のテンプレートはhtmlの仕様に照らして明らかにNGです。
 ひとつのWebページ内に同じid属性を持つタグが複数存在できないからです。
 しかしmixer2はこれについても何もしません。

 mixer2でloadし、何もせずにsaveToString()した結果（抜粋）：

----
<div id="a">xxx</div>
<div id="a">yyy</div>
----

 このように、<<少なくともテンプレートを作成する際には、Webオーサリングツール
 (ex. Dreamweaver)のチェック機能やあるいはhtmllint等のツールを用いて
 ある程度の妥当性検証を行っておくことをおすすめします。>>


* {DOCTYPE宣言は削除されます}

 テンプレートの冒頭にどのようなDOCTYPE宣言があっても、mixer2はそれを無かったことにします。
 JAXB-APIがテンプレートの解析するときにDOCTYPE宣言を発見すると、そのURIにhttpアクセスする
 ことがあり、大きなオーバーヘッドとなってしまうからです。

 アプリケーションの最終的な出力にDOCTYPE宣言が必須であれば、mixer2による出力結果に対して
 手動でDOCTYPE宣言の文字列を追加してください。

* {コメントは削除されます}

----
<!-- コメント... -->
----

----
<!--[if IE]>
<link rel="stylesheet" href="layout_ie.css" type="text/css" />
<![endif]-->
----

 テンプレート上にhtmlコメントがあっても、すべて削除されます。
 これはJava6のJAXB-APIのUnmarshallerの仕様です。
 ということは、 {{http://msdn.microsoft.com/en-us/library/ms537512}} で
 解説されているコンディショナルコメント（分岐条件コメント）も削除されてしまいます。

* {JavaScript}

 JavaScriptは、できるだけ外部ファイル化することをおすすめします。

 テンプレート：

----
<script type="text/javascript"
    src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
----

 mixer2による出力：

----
<script type="text/javascript"
    src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"> </script>
----

 空白がひとつ入ってしまうのは仕様です。Mixer2Engine内部で使用しているtransformerが、
 属性のみでコンテンツのないscriptタグを
 \<script type="text/javascript" src="foo.js" /\> のように
 空要素にしてしまうのを防ぐためです。
 （FireFox等では空要素のscriptタグは正常に作動しないことがあります）

* {JavaScript (Inline)}

 どうしてもxhtml内部にインラインでJavaScriptを書きたい場合には、
 CDATAと//（コメントアウト）を組み合わせてテンプレートを書いてください。

 テンプレート：

----
<script type="text/javascript">
//<![CDATA[
if (1 > 0) { alert('foo!');}
if (1 > 0) { alert('bar!');}
//]]>
</script>

----

 mixer2による出力：

----
<script type="text/javascript">
//<![CDATA[
if (1 > 0) { alert('foo!');}if (1 > 0) { alert('bar!');}//
//]]>
</script>
----

 JavaScriptコード上の改行が消えてしまうのは仕様です。（将来的に改善されるべき）

* {Thread safe}

 mixer2が提供するほとんどのクラスはスレッドセーフです。
 スレッドセーフではないことが明白なクラスについては
 JavaDocに「スレッドセーフではありません」と書いてあります。

* {Mixer2Engineはシングルトンで}

 Mixer2Engine自体のインスタンス生成はかなりのオーバーヘッドがかかります。
 アプリケーションの起動時にDIコンテナ等でsingletonとして
 コンポーネント登録してしまうことをお勧めします。

* {Security}

 Mixer2はセキュリティ面でも優れています。
 例えば、\<script\>タグを作るには、テンプレート上にもともとそれが存在するか、
 あるいはJavaコード上で明示的に Script script = new Script(); 等と書くしかありません。
 <<想定外のタグが出力されること>>に起因するXSS等の脆弱性が発生する余地はほとんどありません。

* {XML-API}

 mixer2はXHTMLをXMLとして扱います。JavaでXMLを操作するAPIは
 様々なものがありますが、主にJAXBを使用しています。
 DOMはメモリを消費しすぎるため使用していません。

* {Performance}

 以下は、HelloWorldレベルの簡単なテンプレートを1万回出力処理した場合の処理時間の比較です。

 * velocity : 0.711 msec

 * mixer2 : 12.672 msec

 []

 mixer2はテンプレートの読み込みと出力にXHTML(=XML)の解析を必要としますので、
 ほかのテンプレートエンジンと比べるとどうしても速度が見劣りします。
 しかし、1万回のループでこの値なので、
 現代のWeb/APサーバのCPU性能とクラウド環境等のスケーラビリティを活かせば、
 十分に実用に耐えると思われます。

 上の性能テストのコード(junit)：

----
package org.mixer2.xhtml;

import java.io.File;
import java.io.StringWriter;
import java.util.Properties;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.junit.Before;
import org.junit.Test;
import org.mixer2.Mixer2Engine;
import org.mixer2.jaxb.xhtml.Div;
import org.mixer2.jaxb.xhtml.Html;
import org.mixer2.xhtml.exception.TagTypeUnmatchException;

public class PerformanceTestHelloWorld {

    private int loop = 10000;

    private VelocityEngine velocityEngine = new VelocityEngine();
    private Template velocityTemplate;
    private Mixer2Engine m2e = new Mixer2Engine();
    private Html html;

    @Before
    public void init() throws Exception {

        ///// for velocity
        Properties p = new Properties();
        p.setProperty("file.resource.loader.path", "");
        p.setProperty("runtime.log.logsystem.class","org.apache.velocity.runtime.log.NullLogSystem");
        velocityEngine.init(p);
        String velocityTemplatePath = getClass()
                .getResource("PerformanceTestHelloWorld.vm").toString()
                .replaceFirst("file:/", "");
        velocityTemplate = velocityEngine.getTemplate(velocityTemplatePath);

        ////// for mixer2
        String mixer2TemplatePath = getClass()
                .getResource("PerformanceTestHelloWorld.html").toString()
                .replaceFirst("file:/", "");
        html = m2e.loadHtmlTemplate(new File(mixer2TemplatePath));
    }

    @Test
    public void helloWroldByMixer2() throws TagTypeUnmatchException {
        for (int i = 0; i < loop; i++) {
            html.getById("hellomsg", Div.class).unsetContent();
            html.getById("hellomsg", Div.class).getContent()
                    .add("Hello World ! " + i);
            StringWriter sw = new StringWriter();
            m2e.saveToStringWriter(html, sw);
            //System.out.println(sw.toString());
        }
    }

    @Test
    public void helloWroldByVelocity() throws Exception {
        for (int i = 0; i < loop; i++) {
            VelocityContext context = new VelocityContext();
            context.put("hellomsg", "Hello World ! " + i);
            StringWriter sw = new StringWriter();
            velocityTemplate.merge(context, sw);
            //System.out.println(sw.toString());
        }
    }

}
----

 Velocity用のテンプレート：

----
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="ja" lang="ja" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</head>
<body>
<div id="hellomsg">$hellomsg</div>
</body>
</html>
----

 mixer2用のテンプレート：

----
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="ja" lang="ja" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</head>
<body>
<div id="hellomsg">here comes message.</div>
</body>
</html>
----

キャッシュ機能について

 テンプレートをロードした結果を何らかの形でキャッシュしておくことで、
 ある程度の性能向上が見込めます。

 残念ながらmixer2にはキャッシュ機能はありませんが、
 全てのタグのclassは implements Serializable であり、
 また自分自身をバイト列化する toByteArray() メソッドを備えています。

 oscacheやehcacheのようなJava向けの汎用キャッシングフレームワークを組み合わて
 キャッシュ機能を実装することは可能でしょう。

